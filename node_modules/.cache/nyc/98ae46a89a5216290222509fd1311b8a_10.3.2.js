var cov_2qs7ladosu=function(){var path='/home/andrews/naivecoin/lib/blockchain/transaction.js',hash='11bd017019f3394a5a031a030572362b43321c40',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/andrews/naivecoin/lib/blockchain/transaction.js',statementMap:{'0':{start:{line:1,column:10},end:{line:1,column:26}},'1':{start:{line:2,column:19},end:{line:2,column:48}},'2':{start:{line:3,column:24},end:{line:3,column:58}},'3':{start:{line:4,column:34},end:{line:4,column:72}},'4':{start:{line:6,column:28},end:{line:6,column:29}},'5':{start:{line:40,column:8},end:{line:40,column:23}},'6':{start:{line:41,column:8},end:{line:41,column:25}},'7':{start:{line:42,column:8},end:{line:42,column:25}},'8':{start:{line:43,column:8},end:{line:46,column:10}},'9':{start:{line:51,column:8},end:{line:51,column:80}},'10':{start:{line:56,column:37},end:{line:56,column:63}},'11':{start:{line:58,column:8},end:{line:61,column:9}},'12':{start:{line:59,column:12},end:{line:59,column:69}},'13':{start:{line:60,column:12},end:{line:60,column:97}},'14':{start:{line:64,column:8},end:{line:76,column:29}},'15':{start:{line:65,column:30},end:{line:69,column:14}},'16':{start:{line:70,column:35},end:{line:70,column:115}},'17':{start:{line:72,column:12},end:{line:75,column:13}},'18':{start:{line:73,column:16},end:{line:73,column:98}},'19':{start:{line:74,column:16},end:{line:74,column:129}},'20':{start:{line:79,column:8},end:{line:97,column:9}},'21':{start:{line:81,column:36},end:{line:81,column:84}},'22':{start:{line:82,column:37},end:{line:82,column:86}},'23':{start:{line:84,column:64},end:{line:84,column:108}},'24':{start:{line:86,column:12},end:{line:89,column:13}},'25':{start:{line:87,column:16},end:{line:87,column:134}},'26':{start:{line:88,column:16},end:{line:88,column:198}},'27':{start:{line:91,column:30},end:{line:91,column:93}},'28':{start:{line:93,column:12},end:{line:96,column:13}},'29':{start:{line:94,column:16},end:{line:94,column:133}},'30':{start:{line:95,column:16},end:{line:95,column:219}},'31':{start:{line:99,column:8},end:{line:99,column:20}},'32':{start:{line:103,column:26},end:{line:103,column:43}},'33':{start:{line:104,column:8},end:{line:104,column:81}},'34':{start:{line:104,column:46},end:{line:104,column:71}},'35':{start:{line:105,column:8},end:{line:105,column:48}},'36':{start:{line:106,column:8},end:{line:106,column:27}},'37':{start:{line:110,column:0},end:{line:110,column:29}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:16},end:{line:47,column:5}},line:39},'1':{name:'(anonymous_1)',decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:13},end:{line:52,column:5}},line:49},'2':{name:'(anonymous_2)',decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:12},end:{line:100,column:5}},line:54},'3':{name:'(anonymous_3)',decl:{start:{line:64,column:14},end:{line:64,column:15}},loc:{start:{line:64,column:27},end:{line:76,column:9}},line:64},'4':{name:'(anonymous_4)',decl:{start:{line:102,column:4},end:{line:102,column:5}},loc:{start:{line:102,column:26},end:{line:107,column:5}},line:102},'5':{name:'(anonymous_5)',decl:{start:{line:104,column:28},end:{line:104,column:29}},loc:{start:{line:104,column:44},end:{line:104,column:73}},line:104}},branchMap:{'0':{loc:{start:{line:58,column:8},end:{line:61,column:9}},type:'if',locations:[{start:{line:58,column:8},end:{line:61,column:9}},{start:{line:58,column:8},end:{line:61,column:9}}],line:58},'1':{loc:{start:{line:72,column:12},end:{line:75,column:13}},type:'if',locations:[{start:{line:72,column:12},end:{line:75,column:13}},{start:{line:72,column:12},end:{line:75,column:13}}],line:72},'2':{loc:{start:{line:79,column:8},end:{line:97,column:9}},type:'if',locations:[{start:{line:79,column:8},end:{line:97,column:9}},{start:{line:79,column:8},end:{line:97,column:9}}],line:79},'3':{loc:{start:{line:86,column:12},end:{line:89,column:13}},type:'if',locations:[{start:{line:86,column:12},end:{line:89,column:13}},{start:{line:86,column:12},end:{line:89,column:13}}],line:86},'4':{loc:{start:{line:93,column:12},end:{line:96,column:13}},type:'if',locations:[{start:{line:93,column:12},end:{line:96,column:13}},{start:{line:93,column:12},end:{line:96,column:13}}],line:93}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const R=(++cov_2qs7ladosu.s[0],require('ramda'));const CryptoUtil=(++cov_2qs7ladosu.s[1],require('../util/cryptoUtil'));const CryptoEdDSAUtil=(++cov_2qs7ladosu.s[2],require('../util/cryptoEdDSAUtil'));const TransactionAssertionError=(++cov_2qs7ladosu.s[3],require('./transactionAssertionError'));const FEE_PER_TRANSACTION=(++cov_2qs7ladosu.s[4],1);/*
Transaction structure:
{ // Transaction
    "id": "84286bba8d...7477efdae1", // random id (64 bytes)
    "hash": "f697d4ae63...c1e85f0ac3", // hash taken from the contents of the transaction: sha256 (id + data) (64 bytes)
    "type": "regular", // transaction type (regular, fee, reward)
    "data": {
        "inputs": [ // Transaction inputs
            {
                "transaction": "9e765ad30c...e908b32f0c", // transaction hash taken from a previous unspent transaction output (64 bytes)
                "index": "0", // index of the transaction taken from a previous unspent transaction output
                "amount": 5000000000, // amount of satoshis
                "address": "dda3ce5aa5...b409bf3fdc", // from address (64 bytes)
                "signature": "27d911cac0...6486adbf05" // transaction input hash: sha256 (transaction + index + amount + address) signed with owner address's secret key (128 bytes)
            }
        ],
        "outputs": [ // Transaction outputs
            {
                "amount": 10000, // amount of satoshis
                "address": "4f8293356d...b53e8c5b25" // to address (64 bytes)
            },
            {
                "amount": 4999989999, // amount of satoshis
                "address": "dda3ce5aa5...b409bf3fdc" // change address (64 bytes)
            }
        ]
    }
}
*/class Transaction{construct(){++cov_2qs7ladosu.f[0];++cov_2qs7ladosu.s[5];this.id=null;++cov_2qs7ladosu.s[6];this.hash=null;++cov_2qs7ladosu.s[7];this.type=null;++cov_2qs7ladosu.s[8];this.data={inputs:[],outputs:[]};}toHash(){++cov_2qs7ladosu.f[1];++cov_2qs7ladosu.s[9];// INFO: Usually there are different implementations of the hash algorithm, for example: https://en.bitcoin.it/wiki/Hashcash
return CryptoUtil.hash(this.id+this.type+JSON.stringify(this.data));}check(){++cov_2qs7ladosu.f[2];// Check if the transaction hash is correct
let isTransactionHashValid=(++cov_2qs7ladosu.s[10],this.hash==this.toHash());++cov_2qs7ladosu.s[11];if(!isTransactionHashValid){++cov_2qs7ladosu.b[0][0];++cov_2qs7ladosu.s[12];console.error(`Invalid transaction hash '${this.hash}'`);++cov_2qs7ladosu.s[13];throw new TransactionAssertionError(`Invalid transaction hash '${this.hash}'`,this);}else{++cov_2qs7ladosu.b[0][1];}// Check if the signature of all input transactions are correct (transaction data is signed by the public key of the address)
++cov_2qs7ladosu.s[14];R.map(txInput=>{++cov_2qs7ladosu.f[3];let txInputHash=(++cov_2qs7ladosu.s[15],CryptoUtil.hash({transaction:txInput.transaction,index:txInput.index,address:txInput.address}));let isValidSignature=(++cov_2qs7ladosu.s[16],CryptoEdDSAUtil.verifySignature(txInput.address,txInput.signature,txInputHash));++cov_2qs7ladosu.s[17];if(!isValidSignature){++cov_2qs7ladosu.b[1][0];++cov_2qs7ladosu.s[18];console.error(`Invalid transaction input signature '${JSON.stringify(txInput)}'`);++cov_2qs7ladosu.s[19];throw new TransactionAssertionError(`Invalid transaction input signature '${JSON.stringify(txInput)}'`,txInput);}else{++cov_2qs7ladosu.b[1][1];}},this.data.inputs);++cov_2qs7ladosu.s[20];if(this.type=='regular'){++cov_2qs7ladosu.b[2][0];// Check if the sum of input transactions are greater than output transactions, it needs to leave some room for the transaction fee
let sumOfInputsAmount=(++cov_2qs7ladosu.s[21],R.sum(R.map(R.prop('amount'),this.data.inputs)));let sumOfOutputsAmount=(++cov_2qs7ladosu.s[22],R.sum(R.map(R.prop('amount'),this.data.outputs)));let isInputsAmountGreaterOrEqualThanOutputsAmount=(++cov_2qs7ladosu.s[23],R.gte(sumOfInputsAmount,sumOfOutputsAmount));++cov_2qs7ladosu.s[24];if(!isInputsAmountGreaterOrEqualThanOutputsAmount){++cov_2qs7ladosu.b[3][0];++cov_2qs7ladosu.s[25];console.error(`Invalid transaction balanceL: inputs sum '${sumOfInputsAmount}', outputs sum '${sumOfOutputsAmount}'`);++cov_2qs7ladosu.s[26];throw new TransactionAssertionError(`Invalid transaction balance: inputs sum '${sumOfInputsAmount}', outputs sum '${sumOfOutputsAmount}'`,{sumOfInputsAmount,sumOfOutputsAmount});}else{++cov_2qs7ladosu.b[3][1];}let isEnoughFee=(++cov_2qs7ladosu.s[27],sumOfInputsAmount-sumOfOutputsAmount>=FEE_PER_TRANSACTION);// 1 because the fee is 1 satoshi per transaction
++cov_2qs7ladosu.s[28];if(!isEnoughFee){++cov_2qs7ladosu.b[4][0];++cov_2qs7ladosu.s[29];console.error(`Not enough fee: expected '${FEE_PER_TRANSACTION}' got '${sumOfInputsAmount-sumOfOutputsAmount}'`);++cov_2qs7ladosu.s[30];throw new TransactionAssertionError(`Not enough fee: expected '${FEE_PER_TRANSACTION}' got '${sumOfInputsAmount-sumOfOutputsAmount}'`,{sumOfInputsAmount,sumOfOutputsAmount,FEE_PER_TRANSACTION});}else{++cov_2qs7ladosu.b[4][1];}}else{++cov_2qs7ladosu.b[2][1];}++cov_2qs7ladosu.s[31];return true;}static fromJson(data){++cov_2qs7ladosu.f[4];let transaction=(++cov_2qs7ladosu.s[32],new Transaction());++cov_2qs7ladosu.s[33];R.forEachObjIndexed((value,key)=>{++cov_2qs7ladosu.f[5];++cov_2qs7ladosu.s[34];transaction[key]=value;},data);++cov_2qs7ladosu.s[35];transaction.hash=transaction.toHash();++cov_2qs7ladosu.s[36];return transaction;}}++cov_2qs7ladosu.s[37];module.exports=Transaction;