var cov_1s1gn594fj=function(){var path='/home/andrews/naivecoin/lib/util/cryptoEdDSAUtil.js',hash='fadc83091fb186fdf23ae46e331674df7e6a6c89',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/andrews/naivecoin/lib/util/cryptoEdDSAUtil.js',statementMap:{'0':{start:{line:1,column:15},end:{line:1,column:32}},'1':{start:{line:2,column:17},end:{line:2,column:36}},'2':{start:{line:3,column:14},end:{line:3,column:28}},'3':{start:{line:4,column:11},end:{line:4,column:31}},'4':{start:{line:5,column:13},end:{line:5,column:79}},'5':{start:{line:9,column:21},end:{line:9,column:92}},'6':{start:{line:10,column:8},end:{line:10,column:45}},'7':{start:{line:11,column:8},end:{line:11,column:22}},'8':{start:{line:16,column:22},end:{line:16,column:46}},'9':{start:{line:17,column:8},end:{line:17,column:84}},'10':{start:{line:18,column:8},end:{line:18,column:23}},'11':{start:{line:22,column:24},end:{line:22,column:71}},'12':{start:{line:23,column:8},end:{line:23,column:51}},'13':{start:{line:24,column:8},end:{line:24,column:25}},'14':{start:{line:28,column:18},end:{line:28,column:52}},'15':{start:{line:29,column:23},end:{line:29,column:57}},'16':{start:{line:30,column:8},end:{line:30,column:47}},'17':{start:{line:31,column:8},end:{line:31,column:24}},'18':{start:{line:35,column:8},end:{line:35,column:42}},'19':{start:{line:39,column:0},end:{line:39,column:33}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:36},end:{line:12,column:5}},line:8},'1':{name:'(anonymous_1)',decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:45},end:{line:19,column:5}},line:14},'2':{name:'(anonymous_2)',decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:42},end:{line:25,column:5}},line:21},'3':{name:'(anonymous_3)',decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:62},end:{line:32,column:5}},line:27},'4':{name:'(anonymous_4)',decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:23},end:{line:36,column:5}},line:34}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const crypto=(++cov_1s1gn594fj.s[0],require('crypto'));const elliptic=(++cov_1s1gn594fj.s[1],require('elliptic'));const EdDSA=(++cov_1s1gn594fj.s[2],elliptic.eddsa);const ec=(++cov_1s1gn594fj.s[3],new EdDSA('ed25519'));const SALT=(++cov_1s1gn594fj.s[4],'0ffaa74d206930aaece253f090c88dbe6685b9e66ec49ad988d84fd7dff230d1');class CryptoEdDSAUtil{static generateSecret(password){++cov_1s1gn594fj.f[0];let secret=(++cov_1s1gn594fj.s[5],crypto.pbkdf2Sync(password,SALT,10000,512,'sha512').toString('hex'));++cov_1s1gn594fj.s[6];console.debug(`Secret: \n${secret}`);++cov_1s1gn594fj.s[7];return secret;}static generateKeyPairFromSecret(secret){++cov_1s1gn594fj.f[1];// Create key pair from secret
let keyPair=(++cov_1s1gn594fj.s[8],ec.keyFromSecret(secret));// hex string, array or Buffer        
++cov_1s1gn594fj.s[9];console.debug(`Public key: \n${elliptic.utils.toHex(keyPair.getPublic())}`);++cov_1s1gn594fj.s[10];return keyPair;}static signHash(keyPair,messageHash){++cov_1s1gn594fj.f[2];let signature=(++cov_1s1gn594fj.s[11],keyPair.sign(messageHash).toHex().toLowerCase());++cov_1s1gn594fj.s[12];console.debug(`Signature: \n${signature}`);++cov_1s1gn594fj.s[13];return signature;}static verifySignature(publicKey,signature,messageHash){++cov_1s1gn594fj.f[3];let key=(++cov_1s1gn594fj.s[14],ec.keyFromPublic(publicKey,'hex'));let verified=(++cov_1s1gn594fj.s[15],key.verify(messageHash,signature));++cov_1s1gn594fj.s[16];console.debug(`Verified: ${verified}`);++cov_1s1gn594fj.s[17];return verified;}static toHex(data){++cov_1s1gn594fj.f[4];++cov_1s1gn594fj.s[18];return elliptic.utils.toHex(data);}}++cov_1s1gn594fj.s[19];module.exports=CryptoEdDSAUtil;